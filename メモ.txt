実行について(データベースにゴミ箱がある場合4.は省略)
1. setup_db.pyを実行
2. receive.pyを実行
3. 新しいターミナルにし、app.pyを実行、Flaskアプリケーションを起動する
4. アプリケーションでゴミ箱の新規登録を行う
5. 新しいターミナルにし(もしくは他のデバイスから)、send.pyを実行
6. アプリケーションに戻り、データベースの更新を確認する

全体の流れ
setup_db.pyを実行して必要なテーブルを作成し、データベースのセットアップを行う。
receive.pyを実行し、TCP通信を用いたデータの受信とデータベースの更新を行う。
app.pyを実行してFlaskサーバーを起動し、ユーザがブラウザを通じてデータを操作できるようにする
send.pyを実行してデータを送信し、動作を確認する。


setup_db.py
データベースのセットアップを行う。テーブルは以下の3つ。
bins: ゴミ箱のIDと場所を管理するテーブル。
garbage: ゴミ箱ごとのゴミの種類とその量を管理するテーブル。
capacities: ゴミ箱ごとのゴミの容量を管理するテーブル。

receive.py
TCP通信を使用してLAN上のクライアントからゴミデータを受信し、データベースを更新する。
　・受信側はサーバーとして設定を行い、接続を待機する。
　・ゴミ箱IDとゴミの種類のメッセージ(テキスト形式)を受信し、データベースを更新する。

app.py
Flaskアプリケーションのメインスクリプト。データベースへの接続管理、ゴミデータの初期化、ルート定義を行う。

send.py
TCP通信を使用してデータを送信するスクリプト。(ターミナルで入力したデータを送信する。)

index.html
ゴミ箱の一覧を表示する。パーセントが赤ゲージの時メッセージを表示する。

bin_details.html
一覧でクリックしたゴミ箱の詳細情報を表示する。ゴミの割合に応じて色分け。

layout.html
共通レイアウトの定義。

new_bin.html
新しいゴミ箱を登録するためのフォーム。

search_bin.html
ゴミ箱IDを入力してゴミ箱を検索するフォーム。

edit_bin.html
選択したゴミ箱のID名、設置場所名、容量の変更、ゴミ箱の削除ができる。

reset_garbage.html
ゴミを回収したとき用のページ。IDとゴミの種類を選択し、カウントを0にする。

help.html
アプリケーションのヘルプページ。

styles.css
アプリケーションのスタイルシート。全体のレイアウトやナビゲーションメニューなどのスタイル。

form.js
フォームの入力値を制限。IDは半角数字8文字、位置は全角50文字まで。

edit_bin.js
編集画面のフォームの制御。

menu.js
モバイルメニューの表示、非表示の制御。

memory_game.js
神経衰弱のゲーム処理。カードの生成、正誤判定、タイマーの処理、ベストタイム保存
(クリックするカードはテキストから画像に変更、またクリック、一致、不一致ごとに画像を変えるなど)

memory_game.html
神経衰弱のページ。スタート、再スタートやタイマーの表示。

memory_game.css
神経衰弱のカードを表示するためのスタイルシート。


やること
　サウンドファイルの差し替え
　使わないファイルの削除
  ファビコンつくる